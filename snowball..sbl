
/*Cette section "fgintegers" définit deux entiers (p1 et p2) qui 
seront utilisés plus tard dans l'algorithme.*/

fgintegers ( p1 p2 )


/*La section "booleans" définit une variable booléenne (Y_found) 
qui sera utilisée pour marquer si le caractère "y" a été trouvé.*/

booleans ( Y_found )

/*On définit une liste de routines qui seront utilisées dans l'algorithme.*/

routines (
   shortv
   R1 R2
   Step_1a Step_1b Step_1c Step_2 Step_3 Step_4 Step_5a Step_5b
)

/*On définit une variable externe appelée "stem" qui sera utilisée 
pour stocker le résultat final du processus de racinisation.*/

externals ( stem )


/*On définit deux groupes de caractères (v et v_WXY) 
qui représentent des ensembles de voyelles et de consonnes*/

groupings ( v v_WXY )

/* On definit les Consonnes  dans une variable V (constante )*/

define v        'aeiouy'
define v_WXY    v + 'wxY'

/*On définir les différentes étapes (steps) de l'algorithme*/

backwardmode (

/*"shortv" est défini comme une séquence*/
 /*de caractères qui représente une voyelle courte.*/

    define shortv as ( non-v_WXY v non-v )

/*Cursor:  the current value of the string cursor*/
/*Les  deux variables R1 et R2 sont définies pour vérifier
 /*la position du curseur par rapport à p1 et p2 respectivement.*/

    define R1 as $p1 <= cursor
    define R2 as $p2 <= cursor

    define Step_1a as (
        [substring] among (
            'sses' (<-'ss')
            'ies'  (<-'i')
            'ss'   ()
            's'    (delete)
        )
    )

/*Les étapes Step_1a, Step_1b, Step_1c, Step_2, Step_3,
 Step_4, Step_5a et Step_5b 
représentent différentes manipulations de sous-chaînes de
 caractères en fonction de certains motifs et conditions.*/

    define Step_1b as (
        [substring] among (
            'eed'  (R1 <-'ee')
            'ed'
            'ing' (
                test gopast v  delete
                test substring among(
                    'at' 'bl' 'iz'
                         (<+ 'e')
                    'bb' 'dd' 'ff' 'gg' 'mm' 'nn' 'pp' 'rr' 'tt'
                    // ignoring double c, h, j, k, q, v, w, and x
                         ([next]  delete)
                    ''   (atmark p1  test shortv  <+ 'e')
                )
            )
        )
    )

/* pour bien comprendre Goto et gopact C*/
/*$x goto 'ad'         /* positions c after 'anim' */
/*   $x goto 'ax'         /* signal f */*/ 
/*   Like goto, but c is not set back, so the effect is to leave c after */
/*   the pattern which matched against  C.*/
/*   $x gopast 'ad'   /* positions c after 'animad' */*/


    define Step_1c as (
        ['y' or 'Y']
        gopast v
        <-'i'
    )

    define Step_2 as (
        [substring] R1 among (
            'tional'  (<-'tion')
            'enci'    (<-'ence')
            'anci'    (<-'ance')
            'abli'    (<-'able')
            'entli'   (<-'ent')
            'eli'     (<-'e')
            'izer' 'ization'
                      (<-'ize')
            'ational' 'ation' 'ator'
                      (<-'ate')
            'alli'    (<-'al')
            'alism' 'aliti'
                      (<-'al')
            'fulness' (<-'ful')
            'ousli' 'ousness'
                      (<-'ous')
            'iveness' 'iviti'
                      (<-'ive')
            'biliti'  (<-'ble')
        )
    )

    define Step_3 as (
        [substring] R1 among (
            'alize'   (<-'al')
            'icate' 'iciti' 'ical'
                      (<-'ic')
            'ative' 'ful' 'ness'
                      (delete)
        )
    )

    define Step_4 as (
        [substring] R2 among (
            'al' 'ance' 'ence' 'er' 'ic' 'able' 'ible' 'ant' 'ement'
            'ment' 'ent' 'ou' 'ism' 'ate' 'iti' 'ous' 'ive' 'ize'
                      (delete)
            'ion'     ('s' or 't' delete)
        )
    )

    define Step_5a as (
        ['e']
        R2 or (R1 not shortv)
        delete
    )

    define Step_5b as (
        ['l']
        R2 'l'
        delete
    )
)

/*On Définit la section "define stem" est définie comme le point d'entrée principal de l'algorithme */
/*de racinisation. Elle initialise des variables, définit des*/
/* marqueurs et exécute les étapes dans l'ordre inverse. Elle */
/* utilise également la variable Y_found pour marquer la présence */
 /*du caractère "y" dans le mot.*/


define stem as (

    unset Y_found
    do ( ['y'] <-'Y' set Y_found)
    do repeat(goto (v ['y']) <-'Y' set Y_found)




    /*les deux postions P1 et P2 pour m>0 et m>1)*/ 
    /* Si m>0 devient vrai au point situé après la 1ére consonne qui suit une voyelle*/
    /* Si m>1 devenir vri qu point situé après le 1ére consoonne qui suite une voyelle qui suite une consonne qui suite une voyelle*/


    $p1 = limit
    $p2 = limit
    do(
        gopast v  gopast non-v  setmark p1
        gopast v  gopast non-v  setmark p2
    )

    backwards (
        do Step_1a
        do Step_1b
        do Step_1c
        do Step_2
        do Step_3
        do Step_4
        do Step_5a
        do Step_5b
    )

    do(Y_found  repeat(goto (['Y']) <-'y'))

)



